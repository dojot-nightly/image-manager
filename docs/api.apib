FORMAT: 1A
HOST: http://localhost:8000

# Image-manager

Simple CRUD service for storing firmware image metadata and binaries


# Group Images

## Image Collection [/image/]

### List All Images [GET /image{?label}]

+ Parameters
    + label: (string, optional) Filter returned images by given label

+ Request
    + Headers
            Authorization: Bearer JWT


+ Response 200 (application/json)
    + Body

            [
                  {
                    "created": "2018-02-08T12:25:11.979313+00:00",
                    "confirmed": true,
                    "label": "ExampleFW",
                    "fw_version": "1.0.0-rc1",
                    "id": "b60aa5e9-cbe6-4b51-b76c-08cf8273db07"
                  },
                  {
                    "created": "2018-02-08T12:25:11.998107+00:00",
                    "confirmed": false,
                    "label": "ExampleFW",
                    "fw_version": "1.0.0-rc1",
                    "id": "51b39543-9de1-4751-9fe2-48c8d6038ba1"
                  },
                  {
                    "confirmed": false,
                    "created": "2018-02-22T21:30:39.740576+00:00",
                    "fw_version": "1.0.0-rc1",
                    "id": "c929e347-0cd3-4925-a9ed-44ec59f7a1b9",
                    "label": "ExampleFW"
                  }

            ]

+ Request With no Authorization
    + Headers

+ Response 401 (application/json)
    + Body

            {
              "message": "No authorization token has been supplied",
              "status": 401
            }


### Create a New Image [POST]

Creates a new image based on a JSON object containing the following metadata.
All fields are required, images with missing metadata fields will return an error


+ label (string) - An informative human-readable label
+ fw_version (string) - FW Semantic versioning info

+ Request (application/json)
    + Headers
            Authorization: Bearer JWT

    + Body

            {
                "label": "FW_Example",
                "fw_version": "1.0.0"
            }


+ Response 201 (application/json)
    + Headers
            Location: /image/asdasdasdasdasdas

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "id": "http://jsonschema.net",
                "type": "object",
                "properties": {
                    "label": {
                      "type": "string"
                    },
                    "published_at": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string",
                      "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
                    }
                },
                "required": [ "label","published_at", "url" ]
            }

+ Request With Missing Fields (application/json)
    + Headers
            Authorization: Bearer JWT

    + Body

            {
                "fw_version": "1.0.0"
            }

+ Response 400 (application/json)
    + Body

            {
                "message": "failed to parse input",
                "errors": {
                "label": [
                      "Missing data for required field."
                    ]
                }
            }


## Binary Collection [/image/binary/]

### List All Binaries [GET]

+ Request
    + Headers
            Authorization: Bearer JWT

+ Response 200 (application/json)
    + Body

            [
              "b60aa5e9-cbe6-4b51-b76c-08cf8273db07.hex"
            ]



## Images [/image/{image_id}]

+ Parameters
    + image_id: `b60aa5e9-cbe6-4b51-b76c-08cf8273db07` (guid) - Unique ID

### Retrieve a single image metadata [GET]
+ Request
    + Headers
            Authorization: Bearer JWT

+ Response 200 (application/json)

           {
                "label": "FW_Example",
                "fw_version": "1.0.0"
            }


### Delete [DELETE]
+ Request
    + Headers
            Authorization: Bearer JWT

+ Response 200


## Image Binaries [/image/{image_id}/binary]

+ Parameters
    + image_id: `b60aa5e9-cbe6-4b51-b76c-08cf8273db07` (guid) - Unique ID

+ Model (multipart/form-data;boundary=BOUNDARY)
    + Headers
            Authorization: Bearer JWT

    + Body

            --BOUNDARY
            Content-Disposition: form-data; name="image"; filename="image.hex"
            Content-Type: application/octet-stream

            0123456789
            --BOUNDARY--


### Retrieve a single image binary [GET]
+ Request
    + Headers
            Authorization: Bearer JWT

+ Response 200 (application/octet-stream)

### Delete [DELETE]
+ Request
    + Headers
            Authorization: Bearer JWT

+ Response 200

### Add binary to an existing image [POST]

+ Parameters
    + image_id: `51b39543-9de1-4751-9fe2-48c8d6038ba1` (guid) - Unique ID

+ Request
    [Image Binaries][]

+ Response 200 (application/json)


### Posting an binary to a non-existing image [POST]

+ Parameters
    + image_id: `51b39543-9de1-4751-9fe2-1asdasdsss4` (guid) - Unique ID

+ Request (multipart/form-data;boundary=BOUNDARY)
    [Image Binaries][]


+ Response 404 (application/json)
    + Body

            {
                "message": "No such image: 51b39543-9de1-4751-9fe2-1asdasdsss4",
                "status": 404
            }

